version: 2
jobs:
  build:
    environment:
      CC_TEST_REPORTER_ID: 70a3a84db9ff477fe82c91874041ca56e647bd6402e328d290875ef3f84bd212
    docker:
      - image: circleci/ruby:2.6.0-node-browsers
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: njoy
          RAILS_ENV: test
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: njoy
          POSTGRES_DB: njoy_test
          POSTGRES_PASSWORD: ""

    steps:
      - checkout

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - njoy-{{ checksum "Gemfile.lock" }}
            - njoy-

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: njoy-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database setup
          command: bin/rails db:migrate

      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter

      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter
      # Run rspec in parallel
      - run:
          name: Run backend tests
          command: |
            bundle exec rspec
            ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/codeclimate.backend.json coverage/backend/.resultset.json
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.backend.json

      # Save test results for timing analysis
      - store_test_results:
          path: test_results
  deploy:
      docker:
        - image: buildpack-deps:trusty
      steps:
        - checkout
        - run:
            name: Deploy Master to Heroku
            command: |
              git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
